<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1432775119000</longProp>
        <longProp name="ThreadGroup.end_time">1432775119000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1708935282">AMBARI_URL</stringProp>
            <stringProp name="-1059405643">MAX_WAIT_MS</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-2106035739">
              <stringProp name="-352117291">http://104.196.84.7:8080/</stringProp>
              <stringProp name="51347766">60000</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">C:/Jmeter/apache-jmeter-2.13/bin/chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load Login Page" enabled="true">
          <stringProp name="WebDriverSampler.script">WDS.log.info(&apos;AMBARI_URL=${AMBARI_URL}&apos;)

WDS.sampleResult.sampleStart()
WDS.browser.get(&apos;${AMBARI_URL}&apos;)
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Login to Dashboard" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var username = WDS.browser.findElement(pkg.By.className(&apos;login-user-name&apos;))
var password = WDS.browser.findElement(pkg.By.className(&apos;login-user-password&apos;))
var loginButton = WDS.browser.findElement(pkg.By.className(&apos;login-btn&apos;))
username.sendKeys([&apos;admin&apos;])
password.sendKeys([&apos;admin&apos;])
loginButton.click()
wait.until(conditions.presenceOfElementLocated(pkg.By.linkText(&apos;Dashboard&apos;)))
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load Dashboard Hetamaps" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HeatmapsTab = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Heatmaps&quot;)]&apos;))

HeatmapsTab.click()
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;span10 heatmap-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load Hosts" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var hostsTab = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Hosts&quot;)]&apos;))

hostsTab.click()
wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;table-overlay hidden&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load Services" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})



WDS.sampleResult.sampleStart()
var HDFSSummary = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Services&quot;)]&apos;))
HDFSSummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HDFS Heatmaps" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HDFSHeatmap = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Heatmaps&quot;)]&apos;))

HDFSHeatmap.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;span10 heatmap-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HDFS Configs" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HDFSConfigs = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Configs&quot;)]&apos;))

HDFSConfigs.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;tab-content service-config-tab-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Return to HDFS Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})



WDS.sampleResult.sampleStart()
var HDFSSummary = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Summary&quot;)]&apos;))
HDFSSummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))


WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load YARN Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var YARNSummary = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;services-menu well span2 service-menu-width&quot;]//li/a[contains(.,&quot;YARN&quot;)]&apos;))

YARNSummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load YARN Heatmaps" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var YARNHeatmap = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Heatmaps&quot;)]&apos;))

YARNHeatmap.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;span10 heatmap-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load YARN Configs" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var YARNConfigs = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Configs&quot;)]&apos;))

YARNConfigs.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;tab-content service-config-tab-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Return to YARN Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})



WDS.sampleResult.sampleStart()
var YARNSummary = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Summary&quot;)]&apos;))
YARNSummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))


WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HBASE Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()

var HBASESummary = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;services-menu well span2 service-menu-width&quot;]//li/a[contains(.,&quot;HBase&quot;)]&apos;))

HBASESummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HBASE Heatmaps" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HBASEHeatmap = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Heatmaps&quot;)]&apos;))

HBASEHeatmap.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;span10 heatmap-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HBASE Configs" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HBASEConfigs = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Configs&quot;)]&apos;))

HBASEConfigs.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;tab-content service-config-tab-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Return to HBASE Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})



WDS.sampleResult.sampleStart()
var HBASESummary = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Summary&quot;)]&apos;))
HBASESummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HIVE Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HIVESummary = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;services-menu well span2 service-menu-width&quot;]//li/a[contains(.,&quot;Hive&quot;)]&apos;))

HIVESummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HIVE Configs" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HIVEConfigs = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Configs&quot;)]&apos;))

HIVEConfigs.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;tab-content service-config-tab-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Return to HIVE Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})



WDS.sampleResult.sampleStart()
var HIVESummary = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Summary&quot;)]&apos;))
HIVESummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load MAPREDUCE2 Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var MAPREDUCE2Configs = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;services-menu well span2 service-menu-width&quot;]//li/a[contains(.,&quot;MapReduce2&quot;)]&apos;))

MAPREDUCE2Configs.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load MAPREDUCE2 Configs" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var MAPREDUCE2Configs = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Configs&quot;)]&apos;))

MAPREDUCE2Configs.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;tab-content service-config-tab-content&quot;]&apos;)))
WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Return to MAPREDUCE2 Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})



WDS.sampleResult.sampleStart()
var MAPREDUCE2Summary = WDS.browser.findElement(pkg.By.xpath(&apos;//li/a[contains(.,&quot;Summary&quot;)]&apos;))
MAPREDUCE2Summary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load Background Operations" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var BackgroundOperations = WDS.browser.findElement(pkg.By.xpath(&apos;//a/span/span[contains(.,&quot;ops&quot;)]&apos;))

BackgroundOperations.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@id=&quot;service-info&quot;]&apos;)))
var closeButton = WDS.browser.findElement(pkg.By.xpath(&apos;//div/a[@class=&quot;close&quot;]&apos;))
closeButton.click()
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Load HDFS Summary" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var HDFSSummary = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;services-menu well span2 service-menu-width&quot;]//li/a[contains(.,&quot;HDFS&quot;)]&apos;))

HDFSSummary.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;service-content row-fluid&quot;]&apos;)))

WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Stop Service" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()
var ServiceActions = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;span10 summary-width&quot;]//div[@class=&quot;service-button&quot;]/div&apos;))
ServiceActions.click()

var stop = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;span10 summary-width&quot;]//a/span[contains(.,&quot;Stop&quot;)]&apos;))
stop.click();

var confirm = WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(.,&quot;Confirm Stop&quot;)]&apos;))
confirm.click();

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@id=&quot;service-info&quot;]&apos;)))
var closeButton = WDS.browser.findElement(pkg.By.xpath(&apos;//div/a[@class=&quot;close&quot;]&apos;))
closeButton.click()
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Wait Service stop" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()

var ServiceActions = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;span10 summary-width&quot;]//div[@class=&quot;service-button&quot;]/div&apos;))
ServiceActions.click()

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@class=&quot;span10 summary-width&quot;]//i[@class=&quot;icon-play enabled&quot;]&apos;)))
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="Start Service" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium)
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait)
var conditions = org.openqa.selenium.support.ui.ExpectedConditions
var wait = new support_ui.WebDriverWait(WDS.browser, ${MAX_WAIT_MS})

WDS.sampleResult.sampleStart()

var start = WDS.browser.findElement(pkg.By.xpath(&apos;//div[@class=&quot;span10 summary-width&quot;]//a/span[contains(.,&quot;Start&quot;)]&apos;))
start.click();

var confirm = WDS.browser.findElement(pkg.By.xpath(&apos;//button[contains(.,&quot;Confirm Start&quot;)]&apos;))
confirm.click();

wait.until(conditions.presenceOfElementLocated(pkg.By.xpath(&apos;//div[@id=&quot;service-info&quot;]&apos;)))

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
